openapi: 3.0.0
info:
  title: HTTP API Console
  name: ""
  description: ""
  version: ""
paths:
  /be-heroes/doxchain/abs/partitioned_pool_registries:
    get:
      operationId: BeheroesDoxchainAbsPartitionedPoolRegistryAll
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  partitionedPoolRegistries:
                    type: array
                    items:
                      type: object
                      properties:
                        creator:
                          type: string
                        pools:
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                  pagination:
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/be-heroes/doxchain/abs/partitioned_pool_registries/{creator}":
    get:
      summary: Queries a list of PartitionedPools items.
      operationId: BeheroesDoxchainAbsPartitionedPoolRegistry
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  partitionedPoolRegistry:
                    type: object
                    properties:
                      creator:
                        type: string
                      pools:
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: creator
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /doxchain/abs/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainAbsParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /doxchain/abs/query_break_factor:
    get:
      summary: Queries a list of QueryBreakFactor items.
      operationId: BeheroesDoxchainAbsQueryBreakFactor
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  value:
                    type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /doxchain/abs/query_watchlist:
    get:
      summary: Queries watchlist.
      operationId: BeheroesDoxchainAbsQueryWatchlist
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  watchlist:
                    type: object
                    properties:
                      entries:
                        type: array
                        items:
                          type: object
                          properties:
                            address:
                              type: string
                            blockHeight:
                              type: string
                              format: uint64
                            coins:
                              type: array
                              items:
                                type: object
                                properties:
                                  denom:
                                    type: string
                                  amount:
                                    type: string
                                description: >-
                                  Coin defines a token with a denomination and
                                  an amount.


                                  NOTE: The amount field is an Int which implements the custom method

                                  signatures required by gogoproto.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/aml/aml_request:
    get:
      summary: Queries a AMLRequest by index.
      operationId: BeheroesDoxchainAmlAMLRequest
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  Request:
                    type: object
                    properties:
                      did:
                        type: object
                        properties:
                          creator:
                            type: string
                          url:
                            type: string
                          methodName:
                            type: string
                          methodId:
                            type: string
                          path:
                            type: string
                          fragment:
                            type: string
                          query:
                            type: string
                          parameters:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                      approved:
                        type: boolean
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: creator
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  /be-heroes/doxchain/aml/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainAmlParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /doxchain/did/did:
    get:
      operationId: BeheroesDoxchainDidDidAll
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  didList:
                    type: array
                    items:
                      type: object
                      properties:
                        creator:
                          type: string
                        url:
                          type: string
                        methodName:
                          type: string
                        methodId:
                          type: string
                        path:
                          type: string
                        fragment:
                          type: string
                        query:
                          type: string
                        parameters:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              value:
                                type: string
                  pagination:
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/doxchain/did/did/{fullyQualifiedDidIdentifier}":
    get:
      summary: Queries a list of Did items.
      operationId: BeheroesDoxchainDidDid
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  Did:
                    type: object
                    properties:
                      creator:
                        type: string
                      url:
                        type: string
                      methodName:
                        type: string
                      methodId:
                        type: string
                      path:
                        type: string
                      fragment:
                        type: string
                      query:
                        type: string
                      parameters:
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                            value:
                              type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: fullyQualifiedDidIdentifier
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /doxchain/did/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainDidParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/idp/get_dot_well_known:
    get:
      summary: Queries a list of GetDotWellKnown items.
      operationId: BeheroesDoxchainIdpGetDotWellKnown
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                  authorizationEndpoint:
                    type: string
                  tokenEndpoint:
                    type: string
                  tokenEndpointAuthMethodsSupported:
                    type: array
                    items:
                      type: string
                  tokenEndpointAuthSigningAlgosSupported:
                    type: array
                    items:
                      type: string
                  userInfoEndpoint:
                    type: string
                  jwksUri:
                    type: string
                  registrationEndpoint:
                    type: string
                  scopesSupported:
                    type: string
                  responseTypesSupported:
                    type: string
                  serviceDocumentation:
                    type: string
                  uiLocalesSupported:
                    type: string
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/idp/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainIdpParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/kyc/kyc_request:
    get:
      summary: Queries a KYCRequest by index.
      operationId: BeheroesDoxchainKycKYCRequest
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  Request:
                    type: object
                    properties:
                      did:
                        type: object
                        properties:
                          creator:
                            type: string
                          url:
                            type: string
                          methodName:
                            type: string
                          methodId:
                            type: string
                          path:
                            type: string
                          fragment:
                            type: string
                          query:
                            type: string
                          parameters:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                value:
                                  type: string
                      approved:
                        type: boolean
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      parameters:
        - name: creator
          in: query
          required: false
          schema:
            type: string
      tags:
        - Query
  /be-heroes/doxchain/kyc/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainKycParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/oauthtwo/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainOauthtwoParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/oracle/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainOracleParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /be-heroes/doxchain/samltwo/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: BeheroesDoxchainSamltwoParams
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    type: object
                description: QueryParamsResponse is response type for the Query/Params RPC
                  method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                      additionalProperties: {}
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts:
    get:
      summary: Accounts returns all the existing accounts
      description: "Since: cosmos-sdk 0.43"
      operationId: CosmosAuthV1Beta1Accounts
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    title: accounts are the existing accounts
                  pagination:
                    description: pagination defines the pagination in the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: >-
                  QueryAccountsResponse is the response type for the
                  Query/Accounts RPC method.


                  Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/cosmos/auth/v1beta1/accounts/{address}":
    get:
      summary: Account returns account details based on address.
      operationId: CosmosAuthV1Beta1Account
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  account:
                    description: account defines the account of the corresponding address.
                    type: object
                    properties:
                      "@type":
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at least

                          one "/" character. The last segment of the URL's path must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary all types that they

                          expect it to use in the context of Any. However, for URLs which use the

                          scheme `http`, `https`, or no scheme, one can optionally set up a type

                          server that maps type URLs to message definitions as follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official

                          protobuf release, and it is not used for type URLs beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                description: QueryAccountResponse is the response type for the
                  Query/Account RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  "/cosmos/auth/v1beta1/address_by_id/{id}":
    get:
      summary: AccountAddressByID returns account address based on account number.
      description: "Since: cosmos-sdk 0.46.2"
      operationId: CosmosAuthV1Beta1AccountAddressByID
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  account_address:
                    type: string
                description: "Since: cosmos-sdk 0.46.2"
                title: QueryAccountAddressByIDResponse is the response type for
                  AccountAddressByID rpc method
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: id
          description: |-
            id is the account number of the address to be queried. This field
            should have been an uint64 (like all account numbers), and will be
            updated to uint64 in a future version of the auth query.
          in: path
          required: true
          schema:
            type: string
            format: int64
      tags:
        - Query
  /cosmos/auth/v1beta1/bech32:
    get:
      summary: Bech32Prefix queries bech32Prefix
      description: "Since: cosmos-sdk 0.46"
      operationId: CosmosAuthV1Beta1Bech32Prefix
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  bech32_prefix:
                    type: string
                description: >-
                  Bech32PrefixResponse is the response type for Bech32Prefix rpc
                  method.


                  Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  "/cosmos/auth/v1beta1/bech32/{address_bytes}":
    get:
      summary: AddressBytesToString converts Account Address bytes to string
      description: "Since: cosmos-sdk 0.46"
      operationId: CosmosAuthV1Beta1AddressBytesToString
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  address_string:
                    type: string
                description: >-
                  AddressBytesToStringResponse is the response type for
                  AddressString rpc method.


                  Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: address_bytes
          in: path
          required: true
          schema:
            type: string
            format: byte
      tags:
        - Query
  "/cosmos/auth/v1beta1/bech32/{address_string}":
    get:
      summary: AddressStringToBytes converts Address string to bytes
      description: "Since: cosmos-sdk 0.46"
      operationId: CosmosAuthV1Beta1AddressStringToBytes
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  address_bytes:
                    type: string
                    format: byte
                description: >-
                  AddressStringToBytesResponse is the response type for
                  AddressBytes rpc method.


                  Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: address_string
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/module_accounts:
    get:
      summary: ModuleAccounts returns all the existing module accounts.
      description: "Since: cosmos-sdk 0.46"
      operationId: CosmosAuthV1Beta1ModuleAccounts
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                description: >-
                  QueryModuleAccountsResponse is the response type for the
                  Query/ModuleAccounts RPC method.


                  Since: cosmos-sdk 0.46
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  "/cosmos/auth/v1beta1/module_accounts/{name}":
    get:
      summary: ModuleAccountByName returns the module account info by module name
      operationId: CosmosAuthV1Beta1ModuleAccountByName
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  account:
                    type: object
                    properties:
                      "@type":
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at least

                          one "/" character. The last segment of the URL's path must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary all types that they

                          expect it to use in the context of Any. However, for URLs which use the

                          scheme `http`, `https`, or no scheme, one can optionally set up a type

                          server that maps type URLs to message definitions as follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official

                          protobuf release, and it is not used for type URLs beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any values in the form

                      of utility functions or additional generated methods of the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use

                      'type.googleapis.com/full.type.name' as the type URL and the unpack

                      methods only use the fully qualified type name after the last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with an

                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": ,
                            "lastName": 
                          }

                      If the embedded message type is well-known and has a custom JSON

                      representation, that representation will be embedded adding a field

                      `value` which holds the custom JSON in addition to the `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: QueryModuleAccountByNameResponse is the response type for the
                  Query/ModuleAccountByName RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: CosmosAuthV1Beta1Params
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  params:
                    description: params defines the parameters of the module.
                    type: object
                    properties:
                      max_memo_characters:
                        type: string
                        format: uint64
                      tx_sig_limit:
                        type: string
                        format: uint64
                      tx_size_cost_per_byte:
                        type: string
                        format: uint64
                      sig_verify_cost_ed25519:
                        type: string
                        format: uint64
                      sig_verify_cost_secp256k1:
                        type: string
                        format: uint64
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      tags:
        - Query
  /cosmos/authz/v1beta1/grants:
    get:
      summary: Returns list of `Authorization`, granted to the grantee by the granter.
      operationId: CosmosAuthzV1Beta1Grants
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  grants:
                    type: array
                    items:
                      type: object
                      properties:
                        authorization:
                          type: object
                          properties:
                            "@type":
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must contain at least

                                one "/" character. The last segment of the URL's path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the binary all types that they

                                expect it to use in the context of Any. However, for URLs which use the

                                scheme `http`, `https`, or no scheme, one can optionally set up a type

                                server that maps type URLs to message definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official

                                protobuf release, and it is not used for type URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty scheme) might be

                                used with implementation specific semantics.
                          additionalProperties: {}
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized message.


                            Protobuf library provides support to pack/unpack Any values in the form

                            of utility functions or additional generated methods of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use

                            'type.googleapis.com/full.type.name' as the type URL and the unpack

                            methods only use the fully qualified type name after the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z" will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the regular

                            representation of the deserialized, embedded message, with an

                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": ,
                                  "lastName": 
                                }

                            If the embedded message type is well-known and has a custom JSON

                            representation, that representation will be embedded adding a field

                            `value` which holds the custom JSON in addition to the `@type`

                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        expiration:
                          type: string
                          format: date-time
                          title: >-
                            time when the grant will expire and will be pruned.
                            If null, then the grant

                            doesn't have a time expiration (other conditions  in `authorization`

                            may apply to invalidate the grant)
                      description: |-
                        Grant gives permissions to execute
                        the provide method with expiration time.
                    description: authorizations is a list of grants granted for grantee by
                      granter.
                  pagination:
                    description: pagination defines an pagination for the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: QueryGrantsResponse is the response type for the
                  Query/Authorizations RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: granter
          in: query
          required: false
          schema:
            type: string
        - name: grantee
          in: query
          required: false
          schema:
            type: string
        - name: msg_type_url
          description: Optional, msg_type_url, when set, will query only grants matching
            given msg type.
          in: query
          required: false
          schema:
            type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: string
            format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key should

            be set.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          schema:
            type: string
            format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in UIs.

            count_total is only respected when offset is used. It is ignored when key

            is set.
          in: query
          required: false
          schema:
            type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          schema:
            type: boolean
      tags:
        - Query
  "/cosmos/authz/v1beta1/grants/grantee/{grantee}":
    get:
      summary: GranteeGrants returns a list of `GrantAuthorization` by grantee.
      description: "Since: cosmos-sdk 0.46"
      operationId: CosmosAuthzV1Beta1GranteeGrants
      responses:
        "200":
          description: A successful response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  grants:
                    type: array
                    items:
                      type: object
                      properties:
                        granter:
                          type: string
                        grantee:
                          type: string
                        authorization:
                          type: object
                          properties:
                            "@type":
                              type: string
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must contain at least

                                one "/" character. The last segment of the URL's path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the binary all types that they

                                expect it to use in the context of Any. However, for URLs which use the

                                scheme `http`, `https`, or no scheme, one can optionally set up a type

                                server that maps type URLs to message definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official

                                protobuf release, and it is not used for type URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty scheme) might be

                                used with implementation specific semantics.
                          additionalProperties: {}
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized message.


                            Protobuf library provides support to pack/unpack Any values in the form

                            of utility functions or additional generated methods of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use

                            'type.googleapis.com/full.type.name' as the type URL and the unpack

                            methods only use the fully qualified type name after the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z" will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the regular

                            representation of the deserialized, embedded message, with an

                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": ,
                                  "lastName": 
                                }

                            If the embedded message type is well-known and has a custom JSON

                            representation, that representation will be embedded adding a field

                            `value` which holds the custom JSON in addition to the `@type`

                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                        expiration:
                          type: string
                          format: date-time
                      title: >-
                        GrantAuthorization extends a grant with both the
                        addresses of the grantee and granter.

                        It is used in genesis.proto and query.proto
                    description: grants is a list of grants granted to the grantee.
                  pagination:
                    description: pagination defines an pagination for the response.
                    type: object
                    properties:
                      next_key:
                        type: string
                        format: byte
                        description: >-
                          next_key is the key to be passed to PageRequest.key to

                          query the next page most efficiently. It will be empty if

                          there are no more results.
                      total:
                        type: string
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                description: QueryGranteeGrantsResponse is the response type for the
                  Query/GranteeGrants RPC method.
        default:
          description: An unexpected error response.
          content:
            "*/*":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        "@type":
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at least

                            one "/" character. The last segment of the URL's path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the binary all types that they

                            expect it to use in the context of Any. However, for URLs which use the

                            scheme `http`, `https`, or no scheme, one can optionally set up a type

                            server that maps type URLs to message definitions as follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official

                            protobuf release, and it is not used for type URLs beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any values in the form

                        of utility functions or additional generated methods of the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use

                        'type.googleapis.com/full.type.name' as the type URL and the unpack

                        methods only use the fully qualified type name after the last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the regular

                        representation of the deserialized, embedded message, with an

                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": ,
                              "lastName": 
                            }

                        If the embedded message type is well-known and has a custom JSON

                        representation, that representation will be embedded adding a field

                        `value` which holds the custom JSON in addition to the `@type`

                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
      parameters:
        - name: grantee
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          schema:
            type: st